*/

1. Number of minimum picks to get 'k' pairs of socks from a drawer 


A drawer contains socks of n different colours. The number of socks available of ith colour 
is given by a[i] where a is an array of n elements. Tony wants to take k pairs of socks out 
of the drawer. However, he cannot see the colour of the sock that he is picking. You have to 
tell what is the minimum number of socks Tony has to pick in one attempt from the drawer such 
that he can be absolutely sure, without seeing their colours, that he will have at least k 
matching pairs.
Example 1:

Input:
N = 4, K = 6
a[] = {3, 4, 5, 3}
Output: 15
Explanation: 
All 15 socks have to be picked in order
to obtain 6 pairs.

Example 2:

Input: N = 2, K = 3
a[] = {4, 6}
Output: 7
Explanation: The Worst case scenario after 6
picks can be {3,3} or {1,5} or {5,1} of each
coloured socks. Hence 7th pick will ensure
3rd pair. 

Your Task:  
You don't need to read input or print anything. Complete the function find_min() which takes the array 
a[], size of array N, and value K as input parameters and returns the minimum number of socks Tony has to 
pick. If it is not possible to pick then return -1.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 105 
1 ≤ a[i] ≤ 106

*/


class Solution{

	public:
	int find_min(int a[], int n, int k) {
        int max_pair=0;
        for (int i=0;i<n;i++){
            max_pair+=a[i]/2;
        }
        if(k>max_pair){
            return -1;
        }
        else{
            int sum=0;
            for (int i=0;i<n;i++){
                if(a[i]%2==0){
                    sum+=(a[i]/2)-1;
                }
                else{
                    sum+=a[i]/2;
                }
            }
            
            if(k>sum){
                return sum*2+n+(k-sum);
            }
            else{
                return (k-1)*2+n+1;
            }
        }
    }

};



/*
Explaination

For those looking for logic without code :

First you should calculate maximum no. of pairs that can be formed.

Then check if k > max_pairs then return -1;

because k pairs cannot be formed.

Then take out maximum pairs without exhausting any color and storing it in a variable 'sum',
means that if there are 6 socks of a color then you should consider only 2 pairs
(because if you will take out 3 pairs then all socks will be exhausted).
Now, if k>sum :
'sum' pairs were picked already, so no. of socks picked = 2*sum
as sum pairs are not enough (i.e, not equal to k), so we need to take more socks,
then we will take n more socks (i.e, 1 sock from each color), so now each color 
will have 1 or 0 sock remaining, then each new pick will complete a pair, 
therefore (k-sum) more picks are required

and if k <= sum :

let 'k-1' pairs are picked using 2*(k-1) socks, then you will take n pairs more
(of unique colors) and if we will take one more pair it will complete the kth pair .

for example
n = 5
a[] = {4,5,7,8,2}
k = 8

max pairs = 2+2+3+4+1 = 12
sum = 1 + 2 + 3 + 3 + 0 = 9

now k<sum :="" so="" we="" require="" 2*(k-1)="2*7" =="" 14=""n="5" answer="14" +="" 5="" +="" 1="">


*/
